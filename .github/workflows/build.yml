name: Build PJ Project

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-windows-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $env:GITHUB_ENV
        shell: powershell

      - name: Unzip PJ Project
        run: |
          Expand-Archive -LiteralPath .\pjproject-${{ env.SRC_VERSION }}.zip -DestinationPath .\ -Force
          Write-Host "Checking extracted contents..."
          dir
          Write-Host "Checking pjproject directory structure..."
          if (Test-Path "pjproject-${{ env.SRC_VERSION }}") {
            dir "pjproject-${{ env.SRC_VERSION }}"
          }
        shell: powershell

      - name: skip openssl (build without SSL)
        run: |
          Write-Host "Skipping OpenSSL - building PJSIP without SSL support"
          Add-Content openssl_dir.txt ""
          Write-Host "OpenSSL disabled - PJSIP will build without SSL features"
        shell: powershell

      - name: verify openssl skip
        run: |
          Write-Host "OpenSSL verification: SSL support disabled"
          if (Test-Path "openssl_dir.txt") {
            $content = Get-Content "openssl_dir.txt"
            Write-Host "OpenSSL dir content: '$content'"
          }
        shell: powershell

      - name: skip libvpx (build without VP8/VP9)
        run: |
          Write-Host "Skipping libvpx - building PJSIP without VP8/VP9 codec support"
          Add-Content libvpx_dir.txt ""
          Write-Host "libvpx disabled - PJSIP will build without VP8/VP9 codecs"
        shell: powershell

      - name: skip SDL (build without SDL video)
        run: |
          Write-Host "Skipping SDL - building PJSIP without SDL video support"
          Add-Content libsdl_dir.txt ""
          Write-Host "SDL disabled - PJSIP will build without SDL video"
        shell: powershell

      - name: Verify PJSIP directory structure
        run: |
          Write-Host "Checking if PJSIP directory exists..."
          if (Test-Path "pjproject-${{ env.SRC_VERSION }}") {
            Write-Host "✓ pjproject-${{ env.SRC_VERSION }} directory found"
            if (Test-Path "pjproject-${{ env.SRC_VERSION }}/pjproject-${{ env.SRC_VERSION }}") {
              Write-Host "✓ Nested pjproject directory found"
              Write-Host "Directory contents:"
              dir "pjproject-${{ env.SRC_VERSION }}/pjproject-${{ env.SRC_VERSION }}"
            } else {
              Write-Host "✗ Nested pjproject directory not found"
              Write-Host "Available in pjproject-${{ env.SRC_VERSION }}:"
              dir "pjproject-${{ env.SRC_VERSION }}"
            }
          } else {
            Write-Host "✗ pjproject-${{ env.SRC_VERSION }} directory not found"
            Write-Host "Current directory contents:"
            dir
          }
        shell: powershell

      - name: config site (minimal build - no SSL)
        run: |
          Write-Host "Current working directory:"
          pwd
          Write-Host "Checking for pjlib directory..."
          if (Test-Path "pjlib/include/pj") {
            Write-Host "✓ pjlib/include/pj found"
            cd pjlib/include/pj
            if (Test-Path "config_site_test.h") {
              cp config_site_test.h config_site.h
              Write-Host "✓ config_site.h created from config_site_test.h"
            } else {
              Write-Host "✗ config_site_test.h not found"
              New-Item -ItemType File -Name "config_site.h" -Force
              Write-Host "✓ Empty config_site.h created"
            }
          } else {
            Write-Host "✗ pjlib/include/pj not found"
            Write-Host "Available directories:"
            dir
            exit 1
          }
          # Minimal configuration - audio only, no video, no SSL, no SRTP
          Write-Host "Configuring PJSIP for minimal build (audio only, no SSL/SRTP)"
          Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
          Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
          Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
          Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
          Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
          Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
          Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
          Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
          Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
        shell: powershell
        working-directory: pjproject-${{ env.SRC_VERSION }}/pjproject-${{ env.SRC_VERSION }}

      - name: check VsDevCmd.bat
        run: dir "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        shell: cmd

      - name: Clean previous builds
        working-directory: pjproject-${{ env.SRC_VERSION }}/pjproject-${{ env.SRC_VERSION }}
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          echo "Cleaning previous build artifacts manually"
          if exist "lib" rmdir /s /q "lib"
          if exist "bin" rmdir /s /q "bin"
          if exist "pjlib\lib" rmdir /s /q "pjlib\lib"
          if exist "pjlib-util\lib" rmdir /s /q "pjlib-util\lib"
          if exist "pjmedia\lib" rmdir /s /q "pjmedia\lib"
          if exist "pjnath\lib" rmdir /s /q "pjnath\lib"
          if exist "pjsip\lib" rmdir /s /q "pjsip\lib"
          if exist "pjsip-apps\bin" rmdir /s /q "pjsip-apps\bin"
          echo "Manual clean completed"
        shell: cmd

      - name: MSBuild (minimal build - x64 only)
        working-directory: pjproject-${{ env.SRC_VERSION }}/pjproject-${{ env.SRC_VERSION }}
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          echo "Building PJSIP with minimal configuration (audio only) - x64 architecture"
          echo "Current directory:"
          cd
          echo "Checking for project files..."
          dir *.vcxproj
          echo "Building core PJSIP projects only..."
          echo "Building pjlib..."
          msbuild pjlib/pjlib.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Building pjlib-util..."
          msbuild pjlib-util/pjlib-util.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Building pjmedia..."
          msbuild pjmedia/pjmedia.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Building pjnath..."
          msbuild pjnath/pjnath.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Building pjsip..."
          msbuild pjsip/pjsip.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Building pjsua..."
          msbuild pjsip-apps/pjsua/pjsua.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=x64 /p:UseEnv=true /verbosity:minimal
          echo "Core PJSIP projects built successfully"
          echo "Checking for generated libraries..."
          dir lib\*.lib
        shell: cmd

      - name: skip test tools (minimal build)
        run: |
          Write-Host "Skipping test tools build for minimal configuration"
        shell: powershell

      - name: skip tests (minimal build)
        run: |
          Write-Host "Skipping PJSIP tests for minimal build"
          Write-Host "Build completed successfully without tests"
        shell: powershell

      - name: Prepare PJSIP bundle
        run: |
          mkdir pjsip-bundle
          mkdir pjsip-bundle\lib
          mkdir pjsip-bundle\include
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjlib\include pjsip-bundle\include\pjlib
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjsip\include pjsip-bundle\include\pjsip
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjnath\include pjsip-bundle\include\pjnath
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjmedia\include pjsip-bundle\include\pjmedia
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjlib\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjsip\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjnath\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjmedia\lib\*.lib pjsip-bundle\lib\
        shell: cmd

      - name: Zip PJSIP bundle
        run: |
          powershell -Command "Compress-Archive -Path .\pjsip-bundle\* -DestinationPath .\pjsip-windows.x64.zip -Force"
          Write-Host "PJSIP bundle zipped successfully"

      - name: Build Node addon
        run: |
          npm ci
          # Copy PJSIP libraries to expected location for Node addon build
          Write-Host "Copying PJSIP libraries for Node addon build"
          Copy-Item -Path "pjproject-${{ env.SRC_VERSION }}\pjlib\lib\*.lib" -Destination "." -Force
          Copy-Item -Path "pjproject-${{ env.SRC_VERSION }}\pjsip\lib\*.lib" -Destination "." -Force
          Copy-Item -Path "pjproject-${{ env.SRC_VERSION }}\pjnath\lib\*.lib" -Destination "." -Force
          Copy-Item -Path "pjproject-${{ env.SRC_VERSION }}\pjmedia\lib\*.lib" -Destination "." -Force
          Write-Host "PJSIP libraries copied successfully"
          npm run build
        shell: powershell

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-node-windows-x64
          path: |
            build/Release/*.node
            dist/**
            pjsip-windows.x64.zip
          if-no-files-found: error
