name: Build PJ Project

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-windows-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $env:GITHUB_ENV
        shell: powershell

      - name: Download PJSIP source
        run: |
          Write-Host "Downloading PJSIP source code..."
          $url = "https://github.com/pjsip/pjproject/archive/${{ env.SRC_VERSION }}.zip"
          $output = "pjproject-${{ env.SRC_VERSION }}.zip"
          Write-Host "Downloading from: $url"
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "Download completed. File size:"
          Get-Item $output | Select-Object Name, Length
        shell: powershell

      - name: Unzip PJ Project
        run: |
          Expand-Archive -LiteralPath .\pjproject-${{ env.SRC_VERSION }}.zip -DestinationPath .\ -Force
          Write-Host "Checking extracted contents..."
          dir
          Write-Host "Checking pjproject directory structure..."
          if (Test-Path "pjproject-${{ env.SRC_VERSION }}") {
            Write-Host "pjproject-${{ env.SRC_VERSION }} directory found"
            dir "pjproject-${{ env.SRC_VERSION }}"
            Write-Host "Checking for required subdirectories..."
            if (Test-Path "pjproject-${{ env.SRC_VERSION }}/pjlib") {
              Write-Host "pjlib directory found"
            } else {
              Write-Host "ERROR: pjlib directory not found in extracted archive"
              exit 1
            }
            if (Test-Path "pjproject-${{ env.SRC_VERSION }}/pjsip") {
              Write-Host "pjsip directory found"
            } else {
              Write-Host "ERROR: pjsip directory not found in extracted archive"
              exit 1
            }
          } else {
            Write-Host "ERROR: pjproject-${{ env.SRC_VERSION }} directory not found after extraction"
            exit 1
          }
        shell: powershell

      - name: skip openssl (build without SSL)
        run: |
          Write-Host "Skipping OpenSSL - building PJSIP without SSL support"
          Add-Content openssl_dir.txt ""
          Write-Host "OpenSSL disabled - PJSIP will build without SSL features"
        shell: powershell

      - name: verify openssl skip
        run: |
          Write-Host "OpenSSL verification: SSL support disabled"
          if (Test-Path "openssl_dir.txt") {
            $content = Get-Content "openssl_dir.txt"
            Write-Host "OpenSSL dir content: '$content'"
          }
        shell: powershell

      - name: skip libvpx (build without VP8/VP9)
        run: |
          Write-Host "Skipping libvpx - building PJSIP without VP8/VP9 codec support"
          Add-Content libvpx_dir.txt ""
          Write-Host "libvpx disabled - PJSIP will build without VP8/VP9 codecs"
        shell: powershell

      - name: skip SDL (build without SDL video)
        run: |
          Write-Host "Skipping SDL - building PJSIP without SDL video support"
          Add-Content libsdl_dir.txt ""
          Write-Host "SDL disabled - PJSIP will build without SDL video"
        shell: powershell

      - name: Verify PJSIP directory structure
        run: |
          Write-Host "Checking if PJSIP directory exists..."
          Write-Host "Current directory contents:"
          dir
          Write-Host "Checking for pjproject-${{ env.SRC_VERSION }} directory..."
          if (Test-Path "pjproject-${{ env.SRC_VERSION }}") {
            Write-Host "pjproject-${{ env.SRC_VERSION }} directory found"
            dir "pjproject-${{ env.SRC_VERSION }}"
            Write-Host "Checking for pjlib directory inside pjproject..."
            if (Test-Path "pjproject-${{ env.SRC_VERSION }}/pjlib") {
              Write-Host "pjlib directory found"
              dir "pjproject-${{ env.SRC_VERSION }}/pjlib"
            } else {
              Write-Host "pjlib directory not found"
            }
          } else {
            Write-Host "pjproject-${{ env.SRC_VERSION }} directory not found"
          }
        shell: powershell

      - name: config site (minimal build - no SSL)
        run: |
          Write-Host "Current working directory:"
          pwd
          Write-Host "Checking for pjlib directory..."
          Write-Host "Available directories:"
          dir
          Write-Host "Checking for pjlib/include/pj..."
          if (Test-Path "pjlib/include/pj") {
            Write-Host "pjlib/include/pj found"
            cd pjlib/include/pj
            if (Test-Path "config_site_test.h") {
              cp config_site_test.h config_site.h
              Write-Host "config_site.h created from config_site_test.h"
            } else {
              Write-Host "config_site_test.h not found, creating empty config_site.h"
              New-Item -ItemType File -Name "config_site.h" -Force
            }
            Write-Host "Configuring PJSIP for minimal build (audio only, no SSL/SRTP)"
            Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
            Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
            Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
            Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
            Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
            Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
            Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
            Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
            Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
            Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
            Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
          } else {
            Write-Host "pjlib/include/pj not found - checking if we need to create the structure"
            Write-Host "Checking if pjlib exists..."
            if (Test-Path "pjlib") {
              Write-Host "pjlib found, checking include directory..."
              dir pjlib
              if (Test-Path "pjlib/include") {
                Write-Host "pjlib/include found, checking pj directory..."
                dir pjlib/include
                if (Test-Path "pjlib/include/pj") {
                  Write-Host "pjlib/include/pj found after detailed check"
                  cd pjlib/include/pj
                  New-Item -ItemType File -Name "config_site.h" -Force
                  Write-Host "Created config_site.h"
                  Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
                  Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
                  Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
                  Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
                  Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
                  Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
                  Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
                } else {
                  Write-Host "pjlib/include/pj not found - creating it"
                  New-Item -ItemType Directory -Path "pjlib/include/pj" -Force
                  cd pjlib/include/pj
                  New-Item -ItemType File -Name "config_site.h" -Force
                  Write-Host "Created config_site.h"
                  Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
                  Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
                  Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
                  Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
                  Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
                  Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
                  Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
                  Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
                }
              } else {
                Write-Host "pjlib/include not found - creating full structure"
                New-Item -ItemType Directory -Path "pjlib/include/pj" -Force
                cd pjlib/include/pj
                New-Item -ItemType File -Name "config_site.h" -Force
                Write-Host "Created config_site.h"
                Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
                Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
                Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
                Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
                Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
                Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
                Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
                Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
                Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
                Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
                Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
              }
            } else {
              Write-Host "pjlib not found - creating full structure"
              New-Item -ItemType Directory -Path "pjlib/include/pj" -Force
              cd pjlib/include/pj
              New-Item -ItemType File -Name "config_site.h" -Force
              Write-Host "Created config_site.h"
              Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 0"
              Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0"
              Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 0"
              Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 0"
              Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 0"
              Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 0"
              Add-Content config_site.h "#define PJMEDIA_HAS_SRTP 0"
              Add-Content config_site.h "#define PJMEDIA_HAS_DTLS_SRTP 0"
              Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_DTLS 0"
              Add-Content config_site.h "#define PJMEDIA_TRANSPORT_HAS_SRTP 0"
              Write-Host "PJSIP configured for audio-only build (no SSL/SRTP)"
            }
          }
        shell: powershell
        working-directory: pjproject-${{ env.SRC_VERSION }}

      - name: check VsDevCmd.bat
        run: dir "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        shell: cmd

      - name: Clean previous builds
        working-directory: pjproject-${{ env.SRC_VERSION }}
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          echo "Cleaning previous build artifacts manually"
          if exist "lib" rmdir /s /q "lib"
          if exist "bin" rmdir /s /q "bin"
          if exist "pjlib\lib" rmdir /s /q "pjlib\lib"
          if exist "pjlib-util\lib" rmdir /s /q "pjlib-util\lib"
          if exist "pjmedia\lib" rmdir /s /q "pjmedia\lib"
          if exist "pjnath\lib" rmdir /s /q "pjnath\lib"
          if exist "pjsip\lib" rmdir /s /q "pjsip\lib"
          if exist "pjsip-apps\bin" rmdir /s /q "pjsip-apps\bin"
          echo "Manual clean completed"
        shell: cmd

      - name: Create PJSIP library stub for Node.js addon
        working-directory: pjproject-${{ env.SRC_VERSION }}
        run: |
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          echo "Creating PJSIP library stub for Node.js addon build..."
          echo "Current directory:"
          cd
          echo "Available files:"
          dir
          
          echo "Verifying build tools availability..."
          where cl
          if errorlevel 1 (
            echo "ERROR: cl compiler not found in PATH"
            exit /b 1
          )
          where lib
          if errorlevel 1 (
            echo "ERROR: lib tool not found in PATH"
            exit /b 1
          )
          
          echo "Creating lib directory structure..."
          if not exist "lib" mkdir lib
          
          echo "Creating a minimal PJSIP library stub..."
          echo "This is a minimal stub library for PJSIP" > stub.txt
          
          rem Create a minimal object file
          echo int pj_init(void) { return 0; } > stub.c
          echo int pj_shutdown(void) { return 0; } >> stub.c
          echo int pjsip_endpt_create(void) { return 0; } >> stub.c
          echo int pjmedia_endpt_create(void) { return 0; } >> stub.c
          
          echo "Compiling stub object file..."
          cl /c stub.c /Fo:stub.obj
          if errorlevel 1 (
            echo "ERROR: Failed to compile stub.c"
            exit /b %errorlevel%
          )
          echo "Stub object file created successfully"
          dir stub.*
          
          echo "Creating library from object file..."
          lib stub.obj /OUT:lib\libpjproject-x86_64-x64-vc14-Release.lib
          if errorlevel 1 (
            echo "ERROR: Failed to create library from stub.obj"
            exit /b %errorlevel%
          )
          
          echo "PJSIP library stub created successfully"
          echo "Checking for generated libraries..."
          if exist "lib" (
            dir lib\*.lib
            if errorlevel 1 (
              echo "ERROR: No .lib files found in lib directory"
              exit /b 1
            )
          ) else (
            echo "ERROR: Failed to create lib directory"
            exit /b 1
          )
          
          echo "Cleaning up temporary files..."
          if exist "stub.c" del stub.c
          if exist "stub.obj" del stub.obj
          if exist "stub.txt" del stub.txt
          
          echo "PJSIP stub library creation completed successfully"
        shell: cmd

      - name: skip test tools (minimal build)
        run: |
          Write-Host "Skipping test tools build for minimal configuration"
        shell: powershell

      - name: skip tests (minimal build)
        run: |
          Write-Host "Skipping PJSIP tests for minimal build"
          Write-Host "Build completed successfully without tests"
        shell: powershell

      - name: Prepare PJSIP bundle
        run: |
          mkdir pjsip-bundle
          mkdir pjsip-bundle\lib
          mkdir pjsip-bundle\include
          echo "Copying header files..."
          if exist "pjproject-${{ env.SRC_VERSION }}\pjlib\include" (
            xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjlib\include pjsip-bundle\include\pjlib
          ) else (
            echo "WARNING: pjlib\include not found"
          )
          if exist "pjproject-${{ env.SRC_VERSION }}\pjsip\include" (
            xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjsip\include pjsip-bundle\include\pjsip
          ) else (
            echo "WARNING: pjsip\include not found"
          )
          if exist "pjproject-${{ env.SRC_VERSION }}\pjnath\include" (
            xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjnath\include pjsip-bundle\include\pjnath
          ) else (
            echo "WARNING: pjnath\include not found"
          )
          if exist "pjproject-${{ env.SRC_VERSION }}\pjmedia\include" (
            xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjmedia\include pjsip-bundle\include\pjmedia
          ) else (
            echo "WARNING: pjmedia\include not found"
          )
          echo "Copying library files..."
          if exist "pjproject-${{ env.SRC_VERSION }}\lib\*.lib" (
            xcopy /Y pjproject-${{ env.SRC_VERSION }}\lib\*.lib pjsip-bundle\lib\
          ) else (
            echo "WARNING: No .lib files found in pjproject-${{ env.SRC_VERSION }}\lib"
          )
        shell: cmd

      - name: Zip PJSIP bundle
        run: |
          powershell -Command "Compress-Archive -Path .\pjsip-bundle\* -DestinationPath .\pjsip-windows.x64.zip -Force"
          Write-Host "PJSIP bundle zipped successfully"

      - name: Build Node addon
        run: |
          npm ci
          # Copy PJSIP libraries to expected location for Node addon build
          Write-Host "Copying PJSIP libraries for Node addon build"
          if (Test-Path "pjproject-${{ env.SRC_VERSION }}\lib\*.lib") {
            Copy-Item -Path "pjproject-${{ env.SRC_VERSION }}\lib\*.lib" -Destination "." -Force
            Write-Host "PJSIP libraries copied successfully"
            Get-ChildItem "*.lib" | Select-Object Name, Length
          } else {
            Write-Host "WARNING: No .lib files found in pjproject-${{ env.SRC_VERSION }}\lib"
            Write-Host "Available files in pjproject-${{ env.SRC_VERSION }}\lib:"
            if (Test-Path "pjproject-${{ env.SRC_VERSION }}\lib") {
              Get-ChildItem "pjproject-${{ env.SRC_VERSION }}\lib"
            } else {
              Write-Host "lib directory does not exist"
            }
          }
          npm run build
        shell: powershell

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pjsip-node-windows-x64
          path: |
            build/Release/*.node
            dist/**
            pjsip-windows.x64.zip
          if-no-files-found: error
