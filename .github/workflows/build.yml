name: Build PJ Project

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-linux-x86:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $GITHUB_ENV

      - name: Unzip PJ Project
        run: unzip ./pjproject-${{ env.SRC_VERSION }}.zip

      - name: install dependencies
        run: sudo apt-get update && sudo apt-get install -y swig nasm sip-tester libvpx-dev libopencore-amrnb-dev
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: get openh264
        run: git clone --single-branch --branch openh264v2.1.0 https://github.com/cisco/openh264.git
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: build openh264
        run: cd openh264 && make && sudo make install && sudo ldconfig
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: config site
        run: cd pjlib/include/pj && cp config_site_test.h config_site.h && echo "#define PJMEDIA_HAS_VIDEO 1" >> config_site.h
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: configure
        run: CFLAGS="-g -fPIC -DHAS_VID_CODEC_TEST=0" CXXFLAGS="-g -fPIC" LDFLAGS="-rdynamic" ./configure
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: make
        run: make -j$(nproc)
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: Show Build Artifacts
        working-directory: ./pjproject-${{ env.SRC_VERSION }}
        run: ls -l

      - name: Prepare PJSIP bundle
        run: |
          mkdir -p ./pjsip-bundle/lib
          mkdir -p ./pjsip-bundle/include
          # Copy all static and shared libraries and headers
          # PJ Lib
          cp ./pjproject-${{ env.SRC_VERSION }}/pjlib/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjlib/lib/*.so* ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjlib/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ SIP
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip/lib/*.so* ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjsip/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ Nath
          cp ./pjproject-${{ env.SRC_VERSION }}/pjnath/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjnath/lib/*.so* ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjnath/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ Media
          cp ./pjproject-${{ env.SRC_VERSION }}/pjmedia/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjmedia/lib/*.so* ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjmedia/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # Copy CLI binary for testing
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip-apps/bin/pjsua-* ./pjsip-bundle/ 2>/dev/null || true

      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION

      - name: Zip PJSIP bundle
        run: |
          cd ./pjsip-bundle
          zip -r ../pjsip-linux.x86.zip .

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.content }}'
          files: ./pjsip-linux.x86.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $GITHUB_ENV

      - name: Unzip PJ Project
        run: unzip ./pjproject-${{ env.SRC_VERSION }}.zip

      - name: install dependencies
        run: brew install openssl@1.1 libvpx swig
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: config site
        run: echo -e "#define PJMEDIA_HAS_VIDEO 1\n#define PJMEDIA_HAS_VID_TOOLBOX_CODEC 1\n" > pjlib/include/pj/config_site.h
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: configure
        run: CFLAGS="-I/usr/local/include -I/usr/local/opt/openssl@1.1/include -fPIC" LDFLAGS="-L/usr/local/lib -L/usr/local/opt/openssl@1.1/lib" CXXFLAGS="-fPIC" ./configure
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: make
        run: make -j$(sysctl -n hw.logicalcpu)
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: Show Build Artifacts
        working-directory: ./pjproject-${{ env.SRC_VERSION }}
        run: ls -l

      - name: Prepare PJSIP bundle
        run: |
          mkdir -p ./pjsip-bundle/lib
          mkdir -p ./pjsip-bundle/include
          # Copy all static and shared libraries and headers
          # PJ Lib
          cp ./pjproject-${{ env.SRC_VERSION }}/pjlib/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjlib/lib/*.dylib ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjlib/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ SIP
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip/lib/*.dylib ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjsip/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ Nath
          cp ./pjproject-${{ env.SRC_VERSION }}/pjnath/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjnath/lib/*.dylib ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjnath/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # PJ Media
          cp ./pjproject-${{ env.SRC_VERSION }}/pjmedia/lib/*.a ./pjsip-bundle/lib/ 2>/dev/null || true
          cp ./pjproject-${{ env.SRC_VERSION }}/pjmedia/lib/*.dylib ./pjsip-bundle/lib/ 2>/dev/null || true
          cp -r ./pjproject-${{ env.SRC_VERSION }}/pjmedia/include/* ./pjsip-bundle/include/ 2>/dev/null || true
          # Copy CLI binary for testing
          cp ./pjproject-${{ env.SRC_VERSION }}/pjsip-apps/bin/pjsua-* ./pjsip-bundle/ 2>/dev/null || true

      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION

      - name: Zip PJSIP bundle
        run: |
          cd ./pjsip-bundle
          zip -r ../pjsip-macos.arm64.zip .

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.content }}'
          files: ./pjsip-macos.arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $env:GITHUB_ENV
        shell: powershell

      - name: Unzip PJ Project
        run: |
          Expand-Archive -LiteralPath .\pjproject-${{ env.SRC_VERSION }}.zip -DestinationPath .\ -Force
        shell: powershell

      - name: get openssl
        run: Invoke-WebRequest -Uri "https://mirror.firedaemon.com/OpenSSL/openssl-1.1.1q.zip" -OutFile ".\openssl.zip"
        shell: powershell

      - name: expand openssl
        run: |
          Expand-Archive -LiteralPath .\openssl.zip -DestinationPath .\openssl_build\; pwd
          cd openssl_build\openssl-1.1\x86
          Add-Content ..\..\..\openssl_dir.txt $pwd.Path
        shell: powershell

      - name: check openssl folder
        run: |
          set /P OPENSSL_DIR=<openssl_dir.txt
          dir "%OPENSSL_DIR%\include"
          dir "%OPENSSL_DIR%\lib"
        shell: cmd

      - name: get libvpx
        run: Invoke-WebRequest -Uri "https://github.com/ShiftMediaProject/libvpx/releases/download/v1.8.2/libvpx_v1.8.2_msvc14.zip" -Outfile "libvpx.zip"
        shell: powershell

      - name: expand libvpx
        run: |
          Expand-Archive -LiteralPath .\libvpx.zip -DestinationPath .\libvpx_build\; pwd
          cd libvpx_build
          Add-Content ..\libvpx_dir.txt $pwd.Path
        shell: powershell

      - name: check libvpx folder
        run: |
          set /P LIBVPX_DIR=<libvpx_dir.txt
          dir "%LIBVPX_DIR%\include"
          dir "%LIBVPX_DIR%\lib\x86"
        shell: cmd

      - name: get libsdl
        run: Invoke-WebRequest -Uri "https://github.com/ShiftMediaProject/SDL/releases/download/release-2.0.9/libsdl_release-2.0.9_msvc14.zip" -Outfile ".\libsdl.zip"
        shell: powershell

      - name: expand libsdl
        run: |
          Expand-Archive -LiteralPath .\libsdl.zip -DestinationPath .\libsdl_build\; pwd
          cd libsdl_build
          Add-Content ..\libsdl_dir.txt $pwd.Path
        shell: powershell

      - name: check libsdl folder
        run: |
          set /P LIBSDL_DIR=<libsdl_dir.txt
          dir "%LIBSDL_DIR%\include\SDL"
          dir "%LIBSDL_DIR%\lib\x86"
        shell: cmd

      - name: config site
        run: |
          cd pjlib/include/pj; cp config_site_test.h config_site.h
          Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 1"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 1"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 1"
        shell: powershell
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: check VsDevCmd.bat
        run: dir "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        shell: cmd

      - name: MSBuild
        working-directory: ./pjproject-${{ env.SRC_VERSION }}
        run: |
          set /P OPENSSL_DIR=<..\openssl_dir.txt
          set /P LIBVPX_DIR=<..\libvpx_dir.txt
          set /P LIBSDL_DIR=<..\libsdl_dir.txt
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          set INCLUDE=%INCLUDE%;%OPENSSL_DIR%\include;%LIBVPX_DIR%\include;%LIBSDL_DIR%\include\SDL
          set LIB=%LIB%;%OPENSSL_DIR%\lib;%LIBVPX_DIR%\lib\x86;%LIBSDL_DIR%\lib\x86
          msbuild pjproject-vs14.sln /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=win32 /p:UseEnv=true
        shell: cmd

      - name: build test tools cmp_wav
        run: |
          set /P OPENSSL_DIR=<..\..\openssl_dir.txt
          set /P LIBVPX_DIR=<..\..\libvpx_dir.txt
          set /P LIBSDL_DIR=<..\..\libsdl_dir.txt
          cd tests/pjsua/tools
          set INCLUDE=%INCLUDE%;%OPENSSL_DIR%\include;%LIBVPX_DIR%\include;%LIBSDL_DIR%\include\SDL
          set LIB=%LIB%;%OPENSSL_DIR%\lib;%LIBVPX_DIR%\lib\x86;%LIBSDL_DIR%\lib\x86
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          msbuild cmp_wav.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=win32 /p:UseEnv=true
        shell: cmd
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: set up Python 2.7 for pjsua test
        uses: actions/setup-python@v5
        with:
          python-version: '2.7'

      - name: unit tests
        run: |
          $env:OPENSSL_DIR = Get-Content .\openssl_dir.txt
          $env:LIBVPX_DIR = Get-Content .\libvpx_dir.txt
          $env:LIBSDL_DIR = Get-Content .\libsdl_dir.txt
          $env:PATH+=";$env:OPENSSL_DIR\bin;$env:LIBVPX_DIR\bin\x86;$env:LIBSDL_DIR\bin\x86;"
          cd pjproject-${{ env.SRC_VERSION }}\tests\pjsua; python runall.py
        shell: powershell

      - name: Prepare PJSIP bundle
        run: |
          mkdir pjsip-bundle
          mkdir pjsip-bundle\lib
          mkdir pjsip-bundle\include
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjlib\include pjsip-bundle\include\pjlib
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjsip\include pjsip-bundle\include\pjsip
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjnath\include pjsip-bundle\include\pjnath
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjmedia\include pjsip-bundle\include\pjmedia
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjlib\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjsip\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjnath\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjmedia\lib\*.lib pjsip-bundle\lib\
        shell: cmd

      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION

      - name: Zip PJSIP bundle
        run: |
          powershell -Command "Compress-Archive -Path .\pjsip-bundle\* -DestinationPath .\pjsip-windows.x64.zip -Force"

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.content }}'
          files: ./pjsip-windows.x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Node addon
        run: |
          npm ci
          npm run build
        shell: powershell

      - name: Upload Node addon artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-addon-windows-x64
          path: |
            build/Release/*.node
            dist/**
          if-no-files-found: error


