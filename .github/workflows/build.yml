name: Build PJ Project

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build-windows-x64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          check-latest: true

      - name: Set Project src
        run: echo "SRC_VERSION=2.15.1" >> $env:GITHUB_ENV
        shell: powershell

      - name: Unzip PJ Project
        run: |
          Expand-Archive -LiteralPath .\pjproject-${{ env.SRC_VERSION }}.zip -DestinationPath .\ -Force
        shell: powershell

      - name: get openssl
        run: |
          try {
            Invoke-WebRequest -Uri "https://slproweb.com/download/Win64OpenSSL_Light-1_1_1q.exe" -OutFile ".\openssl-installer.exe"
            if (!(Test-Path ".\openssl-installer.exe")) {
              Write-Error "OpenSSL download failed"
              exit 1
            }
            Write-Host "OpenSSL downloaded successfully"
          } catch {
            Write-Error "Failed to download OpenSSL: $_"
            exit 1
          }
        shell: powershell

      - name: install openssl
        run: |
          try {
            # Extract OpenSSL installer silently
            Start-Process -FilePath ".\openssl-installer.exe" -ArgumentList "/SILENT", "/DIR=C:\openssl" -Wait
            if (Test-Path "C:\openssl") {
              Add-Content openssl_dir.txt "C:\openssl"
              Write-Host "OpenSSL installed to C:\openssl"
            } else {
              Write-Error "OpenSSL installation failed"
              exit 1
            }
          } catch {
            Write-Error "Failed to install OpenSSL: $_"
            exit 1
          }
        shell: powershell

      - name: check openssl folder
        run: |
          set /P OPENSSL_DIR=<openssl_dir.txt
          dir "%OPENSSL_DIR%\include"
          dir "%OPENSSL_DIR%\lib"
        shell: cmd

      - name: get libvpx
        run: |
          try {
            Invoke-WebRequest -Uri "https://github.com/webmproject/libvpx/archive/v1.13.0.zip" -Outfile "libvpx.zip"
            if (!(Test-Path "libvpx.zip")) {
              Write-Error "libvpx download failed"
              exit 1
            }
            Write-Host "libvpx downloaded successfully"
          } catch {
            Write-Error "Failed to download libvpx: $_"
            exit 1
          }
        shell: powershell

      - name: expand libvpx
        run: |
          try {
            Expand-Archive -LiteralPath .\libvpx.zip -DestinationPath .\libvpx_build\ -Force
            if (Test-Path ".\libvpx_build") {
              cd libvpx_build
              Add-Content ..\libvpx_dir.txt $pwd.Path
              Write-Host "libvpx extracted successfully"
            } else {
              Write-Error "libvpx extraction failed"
              exit 1
            }
          } catch {
            Write-Error "Failed to extract libvpx: $_"
            exit 1
          }
        shell: powershell

      - name: check libvpx folder
        run: |
          set /P LIBVPX_DIR=<libvpx_dir.txt
          dir "%LIBVPX_DIR%\include"
          dir "%LIBVPX_DIR%\lib\x86"
        shell: cmd

      - name: get libsdl
        run: |
          try {
            Invoke-WebRequest -Uri "https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-devel-2.28.5-VC.zip" -Outfile ".\libsdl.zip"
            if (!(Test-Path ".\libsdl.zip")) {
              Write-Error "SDL download failed"
              exit 1
            }
            Write-Host "SDL downloaded successfully"
          } catch {
            Write-Error "Failed to download SDL: $_"
            exit 1
          }
        shell: powershell

      - name: expand libsdl
        run: |
          try {
            Expand-Archive -LiteralPath .\libsdl.zip -DestinationPath .\libsdl_build\ -Force
            if (Test-Path ".\libsdl_build") {
              cd libsdl_build
              Add-Content ..\libsdl_dir.txt $pwd.Path
              Write-Host "SDL extracted successfully"
            } else {
              Write-Error "SDL extraction failed"
              exit 1
            }
          } catch {
            Write-Error "Failed to extract SDL: $_"
            exit 1
          }
        shell: powershell

      - name: check libsdl folder
        run: |
          set /P LIBSDL_DIR=<libsdl_dir.txt
          dir "%LIBSDL_DIR%\include\SDL"
          dir "%LIBSDL_DIR%\lib\x86"
        shell: cmd

      - name: config site
        run: |
          cd pjlib/include/pj; cp config_site_test.h config_site.h
          Add-Content config_site.h "#define PJ_HAS_SSL_SOCK 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_VIDEO 1"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_LIBYUV 1"
          Add-Content config_site.h "#define PJMEDIA_VIDEO_DEV_HAS_SDL 1"
          Add-Content config_site.h "#define PJMEDIA_HAS_VPX_CODEC 1"
        shell: powershell
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: check VsDevCmd.bat
        run: dir "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
        shell: cmd

      - name: MSBuild
        working-directory: ./pjproject-${{ env.SRC_VERSION }}
        run: |
          set /P OPENSSL_DIR=<..\openssl_dir.txt
          set /P LIBVPX_DIR=<..\libvpx_dir.txt
          set /P LIBSDL_DIR=<..\libsdl_dir.txt
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          set INCLUDE=%INCLUDE%;%OPENSSL_DIR%\include;%LIBVPX_DIR%\include;%LIBSDL_DIR%\include\SDL
          set LIB=%LIB%;%OPENSSL_DIR%\lib;%LIBVPX_DIR%\lib\x86;%LIBSDL_DIR%\lib\x86
          msbuild pjproject-vs14.sln /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=win32 /p:UseEnv=true
        shell: cmd

      - name: build test tools cmp_wav
        run: |
          set /P OPENSSL_DIR=<..\..\openssl_dir.txt
          set /P LIBVPX_DIR=<..\..\libvpx_dir.txt
          set /P LIBSDL_DIR=<..\..\libsdl_dir.txt
          cd tests/pjsua/tools
          set INCLUDE=%INCLUDE%;%OPENSSL_DIR%\include;%LIBVPX_DIR%\include;%LIBSDL_DIR%\include\SDL
          set LIB=%LIB%;%OPENSSL_DIR%\lib;%LIBVPX_DIR%\lib\x86;%LIBSDL_DIR%\lib\x86
          call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          msbuild cmp_wav.vcxproj /p:PlatformToolset=v143 /p:Configuration=Release /p:Platform=win32 /p:UseEnv=true
        shell: cmd
        working-directory: ./pjproject-${{ env.SRC_VERSION }}

      - name: set up Python 2.7 for pjsua test
        uses: actions/setup-python@v5
        with:
          python-version: '2.7'

      - name: unit tests
        run: |
          $env:OPENSSL_DIR = Get-Content .\openssl_dir.txt
          $env:LIBVPX_DIR = Get-Content .\libvpx_dir.txt
          $env:LIBSDL_DIR = Get-Content .\libsdl_dir.txt
          $env:PATH+=";$env:OPENSSL_DIR\bin;$env:LIBVPX_DIR\bin\x86;$env:LIBSDL_DIR\bin\x86;"
          cd pjproject-${{ env.SRC_VERSION }}\tests\pjsua; python runall.py
        shell: powershell

      - name: Prepare PJSIP bundle
        run: |
          mkdir pjsip-bundle
          mkdir pjsip-bundle\lib
          mkdir pjsip-bundle\include
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjlib\include pjsip-bundle\include\pjlib
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjsip\include pjsip-bundle\include\pjsip
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjnath\include pjsip-bundle\include\pjnath
          xcopy /Y /I pjproject-${{ env.SRC_VERSION }}\pjmedia\include pjsip-bundle\include\pjmedia
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjlib\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjsip\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjnath\lib\*.lib pjsip-bundle\lib\
          xcopy /Y pjproject-${{ env.SRC_VERSION }}\pjmedia\lib\*.lib pjsip-bundle\lib\
        shell: cmd

      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION

      - name: Zip PJSIP bundle
        run: |
          powershell -Command "Compress-Archive -Path .\pjsip-bundle\* -DestinationPath .\pjsip-windows.x64.zip -Force"

      - name: Upload ZIP to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.content }}'
          files: ./pjsip-windows.x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Node addon
        run: |
          npm ci
          npm run build
        shell: powershell

      - name: Upload Node addon artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-addon-windows-x64
          path: |
            build/Release/*.node
            dist/**
          if-no-files-found: error
